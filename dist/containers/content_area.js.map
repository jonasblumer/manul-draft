{"version":3,"sources":["../../src/containers/content_area.js"],"names":["dataComposer","onData","context","contentId","entities","sampleContent","Meteor","Collections","i18n","contentLoaded","subscribe","ready","locale","getLocale","content","Contents","findOne","initialEditorState","CompositeDecorator","stateComposer","LocalState","Roles","canEdit","userIsInRole","userId","cancelEditing","delete","isEditing","equals","startEditing","set","pluginComposer","blockPluginProps","blockPlugins","megadraftBlockPlugins","map","plugin","entityInputs","e","inputComponent","i18nComposer","editorState","setEditorState","manulDraft","highlightEditable","copyLocales","value","copyFromLocale","fromLocale","fromContent","newContentState","convertFromRaw","newContent","Modifier","replaceWithFragment","getCurrentContent","getSelection","getBlockMap","newEditorState","EditorState","push","depsMapper","actions","save","cm","saveAndClose","editor","convertToRaw","error","saveAndEdit","cancel","blockPluginDialogIsActive","block","getData","get","getBlocksAsArray"],"mappings":"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","file":"content_area.js","sourcesContent":["import { useDeps, composeAll, composeWithTracker, compose } from 'mantra-core';\nimport { DraftJS, editorStateFromRaw } from 'megadraft';\nimport { any, invoke, defer, keys, filter, isEmpty, flow, get, keyBy, mapValues } from 'lodash/fp';\nimport { withProps, withState, withPropsOnChange, withHandlers, onlyUpdateForKeys } from 'recompose';\n\nimport ContentArea from '../components/content_area';\n\n\nexport const dataComposer = (\n  { context, contentId, entities = [], sampleContent = null }, onData,\n) => {\n  const { Meteor, Collections, i18n } = context();\n  const contentLoaded = Meteor.subscribe('contents.one', contentId).ready();\n  const locale = i18n.getLocale();\n  const content = Collections.Contents.findOne(contentId);\n  if (contentLoaded) {\n    const initialEditorState = editorStateFromRaw(\n      content ?\n      get(`value.${locale}`, content) :\n      sampleContent,\n      new DraftJS.CompositeDecorator(entities || []),\n    );\n    onData(null, { content, locale, initialEditorState });\n  }\n};\n\nexport const stateComposer = ({ context, contentId }, onData) => {\n  const { LocalState, Roles, Meteor } = context();\n  const canEdit = Roles.userIsInRole(Meteor.userId(), 'admin');\n  const cancelEditing = () => LocalState.delete('cm.editingMode');\n  const isEditing = LocalState.equals('cm.editingMode', contentId);\n  const startEditing = () => LocalState.set('cm.editingMode', contentId);\n  onData(null, { canEdit, isEditing, cancelEditing, startEditing });\n};\n\nexport const pluginComposer = (\n  { blockPluginProps = {}, isEditing, entities = [], blockPlugins = [] }, onData,\n) => {\n  // megadraft has no concept of editing/readonly (yet)\n  // so we init every plugin with the editingState\n  // in order to display a different component when isEditing/not isEditing\n  onData(null, {\n    megadraftBlockPlugins: blockPlugins.map(plugin => plugin({ isEditing, blockPluginProps })),\n    entityInputs: flow(\n      keyBy('_id'),\n      mapValues(e => e.inputComponent),\n    )(entities),\n  });\n};\n\nexport const i18nComposer = ({ context, content, editorState, setEditorState }, onData) => {\n  const { manulDraft } = context();\n  const highlightEditable = invoke('highlightEditable', manulDraft);\n  // keys in value are locales where we can copy from\n  const copyLocales = content && flow(\n    keys,\n    filter(locale => !isEmpty(get(['value', locale], content))),\n  )(content.value);\n\n  const copyFromLocale = (fromLocale) => {\n    // clone the content\n    const fromContent = get(`value.${fromLocale}`, content);\n    if (fromContent) {\n      // some draftjs voodoo to insert the rawContent into the current selection\n      const newContentState = DraftJS.convertFromRaw(fromContent);\n      const newContent = DraftJS.Modifier.replaceWithFragment(\n        editorState.getCurrentContent(),\n        editorState.getSelection(),\n        newContentState.getBlockMap(),\n      );\n      const newEditorState = DraftJS.EditorState.push(editorState, newContent, 'insert-fragment');\n      setEditorState(newEditorState);\n    }\n  };\n  onData(null, { copyLocales, highlightEditable, copyFromLocale });\n};\n\nexport const depsMapper = (context, actions) => ({\n  context: () => context,\n  save: actions.cm.save,\n  ...context.manulDraft,\n});\n\n\nexport default composeAll(\n  composeWithTracker(i18nComposer),\n  // wait for https://github.com/acdlite/recompose/issues/259\n  // this here is a dirty workaround\n  withPropsOnChange(['initialEditorState'], ({ initialEditorState, setEditorState }) => {\n    /* eslint lodash-fp/no-unused-result: 0*/\n    defer(() => setEditorState(initialEditorState));\n  }),\n  withHandlers({\n    saveAndClose: ({ save, cancelEditing, editorState, contentId, locale }) => () => {\n      save(\n        { contentId, locale, editor: DraftJS.convertToRaw(editorState.getCurrentContent()) },\n        error => !error && cancelEditing(false),\n      );\n    },\n    saveAndEdit: ({ save, editorState, contentId, locale }) => () => {\n      save(\n        { contentId, locale, editor: DraftJS.convertToRaw(editorState.getCurrentContent()) },\n      );\n    },\n    cancel: ({ cancelEditing, setEditorState, initialEditorState }) => () => {\n      setEditorState(initialEditorState);\n      cancelEditing(false);\n    },\n  }),\n  withProps(({ editorState }) => ({\n    blockPluginDialogIsActive: any(\n        block => block.getData().get('showDialog'),\n      )(editorState.getCurrentContent().getBlocksAsArray()),\n  })),\n  withState('editorState', 'setEditorState', ({ initialEditorState }) => initialEditorState),\n  composeWithTracker(dataComposer),\n  compose(pluginComposer),\n  composeWithTracker(stateComposer),\n  useDeps(depsMapper),\n  onlyUpdateForKeys(['contentId']),\n)(ContentArea);\n"]}